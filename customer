// Customer.java
package com.example.spring_practice;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;
@Entity
@Data
public class Customer {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
@Column(name = "customerName", nullable = true)
private String customerName;
@Column(name = "email", nullable = true)
private String email;
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getCustomerName() {
return customerName;
}
public void setCustomerName(String customerName) {
this.customerName = customerName;
}
public String getEmail() {
return email;
}
public void setEmail(String email) {
this.email = email;
}
}
// CustomerController.java
package com.example.spring_practice;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
@RestController
@RequestMapping("/customers")
public class CustomerController {
@Autowired
private CustomerService service;
@PostMapping
public Customer createCustomer(@RequestBody Customer customer) {
return service.createCustomer(customer);
}
@GetMapping("/{customerId}")
public Customer getCustomerById(@PathVariable Long customerId) {
return service.getCustomerById(customerId);
}
@GetMapping
public List<Customer> getAllCustomers() {
return service.getAllCustomers();
}
}
// CustomerRepository.java
package com.example.spring_practice;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
@Repository
public interface CustomerRepository extends JpaRepository<Customer, Long> {
}
// CustomerService.java
package com.example.spring_practice;
import java.util.List;
import org.springframework.stereotype.Service;
@Service
public interface CustomerService {
Customer createCustomer(Customer customer);
Customer getCustomerById(Long customerId);
List<Customer> getAllCustomers();
Customer saveCustomer(Customer customer);
List<Customer> saveCustomer(List<Customer> customers);
}
// CustomerServiceImpl.java
package com.example.spring_practice;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import lombok.AllArgsConstructor;
@Service
@AllArgsConstructor
public class CustomerServiceImpl implements CustomerService {
@Autowired
private CustomerRepository customerRepository;
@Override
public Customer createCustomer(Customer customer) {
return customerRepository.save(customer);
}
@Override
public Customer getCustomerById(Long customerId) {
Optional<Customer> optionalCustomer =
customerRepository.findById(customerId);
return optionalCustomer.orElse(null);
}
@Override
public List<Customer> getAllCustomers() {
return customerRepository.findAll();
}
@Override
public Customer saveCustomer(Customer customer) {
return customerRepository.save(customer);
}
@Override
public List<Customer> saveCustomer(List<Customer> customers) {
return customerRepository.saveAll(customers);
}
}
// application.properties
spring.application.name=spring_practice
server.port=8092
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/db_practice
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.Imp
licitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.Phy
sicalNamingStrategyStandardImpl
// SpringPracticeApplication.java
package com.example.spring_practice;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class SpringPracticeApplication {
public static void main(String[] args) {
SpringApplication.run(SpringPracticeApplication.class, args);
}
}
